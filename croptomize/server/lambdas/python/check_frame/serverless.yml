service: croptomize-api

provider:
  name: aws
  runtime: python3.7
  profile: Croptomize
  stage: dev
  region: us-east-2
  environment:
    TABLE_NAME: ${self:custom.table_name}
    STAGE: ${self:custom.stage}

  iamRoleStatements:
    - Effect: "Allow"
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "Fn::GetAtt": [ FrameTable, Arn ]

functions:
  check_frame:
    handler: scripts/check_frame.run
    timeout: 20
    memorySize: 128
    events:
      - http:
          method: get
          path: check_frame
  import_frames:
    handler: scripts/import_frames.run
    timeout: 20
    memorySize: 128

resources: 
  Resources:
    FrameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table_name}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: frame_name
            AttributeType: S
        KeySchema:
          - AttributeName: frame_name
            KeyType: HASH

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local

package:
  exclude:
    - node_modules

custom:
  stage: ${opt:stage, self:provider.stage}
  table_name: ${self:custom.stage}_frame
  dynamodb:
    start:
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:custom.table_name}
            sources: [./test_data/frames.json]
    stages:
      - local
  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: true
    useStaticCache: true